import tkinter as tk
from tkinter import messagebox

class Livro:
    def __init__(self, titulo, autor):
        self.titulo = titulo
        self.autor = autor

    def __str__(self):
        return f"ID: {self.identificador} - {self.titulo} por {self.autor}"


class No:
    def __init__(self, livro):
        self.livro = livro
        self.esquerda = None
        self.direita = None
        self.altura = 1


class ArvoreAVL:

    def __init__(self):
        self.contador = 1  # Contador para os identificadores

    def altura(self, no):
        if not no:
            return 0
        return no.altura

    def rotacao_direita(self, z):
        y = z.esquerda
        T3 = y.direita

        y.direita = z
        z.esquerda = T3

        z.altura = 1 + max(self.altura(z.esquerda), self.altura(z.direita))
        y.altura = 1 + max(self.altura(y.esquerda), self.altura(y.direita))

        return y

    def rotacao_esquerda(self, z):
        y = z.direita
        T2 = y.esquerda

        y.esquerda = z
        z.direita = T2

        z.altura = 1 + max(self.altura(z.esquerda), self.altura(z.direita))
        y.altura = 1 + max(self.altura(y.esquerda), self.altura(y.direita))

        return y

    def fator_balanceamento(self, no):
        if not no:
            return 0
        return self.altura(no.esquerda) - self.altura(no.direita)

    def inserir(self, raiz, novo_livro):
        if not raiz:
            novo_livro.identificador = self.contador
            self.contador += 1
            return No(novo_livro)

        if novo_livro.titulo < raiz.livro.titulo:
            raiz.esquerda = self.inserir(raiz.esquerda, novo_livro)
        else:
            raiz.direita = self.inserir(raiz.direita, novo_livro)

        raiz.altura = 1 + max(self.altura(raiz.esquerda), self.altura(raiz.direita))

        balanceamento = self.fator_balanceamento(raiz)

        if balanceamento > 1:
            if novo_livro.titulo < raiz.esquerda.livro.titulo:
                return self.rotacao_direita(raiz)
            else:
                raiz.esquerda = self.rotacao_esquerda(raiz.esquerda)
                return self.rotacao_direita(raiz)

        if balanceamento < -1:
            if novo_livro.titulo > raiz.direita.livro.titulo:
                return self.rotacao_esquerda(raiz)
            else:
                raiz.direita = self.rotacao_direita(raiz.direita)
                return self.rotacao_esquerda(raiz)

        return raiz

    def busca(self, raiz, titulo):
        if not raiz or raiz.livro.titulo == titulo:
            return raiz

        if titulo < raiz.livro.titulo:
            return self.busca(raiz.esquerda, titulo)
        else:
            return self.busca(raiz.direita, titulo)

    def menor_valor_no(self, no):
        atual = no
        while atual.esquerda:
            atual = atual.esquerda
        return atual

    def remover(self, raiz, titulo):
        if not raiz:
            return raiz

        if titulo < raiz.livro.titulo:
            raiz.esquerda = self.remover(raiz.esquerda, titulo)
        elif titulo > raiz.livro.titulo:
            raiz.direita = self.remover(raiz.direita, titulo)
        else:
            if raiz.esquerda is None:
                temp = raiz.direita
                raiz = None
                return temp
            elif raiz.direita is None:
                temp = raiz.esquerda
                raiz = None
                return temp

            temp = self.menor_valor_no(raiz.direita)
            raiz.livro = temp.livro
            raiz.direita = self.remover(raiz.direita, temp.livro.titulo)

        if raiz is None:
            return raiz

        raiz.altura = 1 + max(self.altura(raiz.esquerda), self.altura(raiz.direita))

        balanceamento = self.fator_balanceamento(raiz)

        if balanceamento > 1:
            if self.fator_balanceamento(raiz.esquerda) >= 0:
                return self.rotacao_direita(raiz)
            else:
                raiz.esquerda = self.rotacao_esquerda(raiz.esquerda)
                return self.rotacao_direita(raiz)

        if balanceamento < -1:
            if self.fator_balanceamento(raiz.direita) <= 0:
                return self.rotacao_esquerda(raiz)
            else:
                raiz.direita = self.rotacao_direita(raiz.direita)
                return self.rotacao_esquerda(raiz)

        return raiz

    def contagem_por_autor(self, raiz, autor):
        if not raiz:
            return 0

        contagem = 0
        if raiz.livro.autor == autor:
            contagem += 1

        contagem += self.contagem_por_autor(raiz.esquerda, autor)
        contagem += self.contagem_por_autor(raiz.direita, autor)

        return contagem

    def exibir_em_ordem_crescente(self, raiz):
        if not raiz:
            return []

        livros = []
        livros += self.exibir_em_ordem_crescente(raiz.esquerda)
        livros.append(raiz.livro)
        livros += self.exibir_em_ordem_crescente(raiz.direita)

        return livros

    def salvar_arvore_em_arquivo(self, raiz, nome_arquivo):
        with open(nome_arquivo, 'w') as arquivo:
            livros = self.exibir_em_ordem_crescente(raiz)
            for livro in livros:
                arquivo.write(f"{livro.titulo},{livro.autor}\n")

    def carregar_arvore_de_arquivo(self, nome_arquivo):
        raiz = None
        with open(nome_arquivo, 'r') as arquivo:
            linhas = arquivo.readlines()
            for linha in linhas:
                dados = linha.strip().split(',')
                livro = Livro(dados[0], dados[1])
                raiz = self.inserir(raiz, livro)
        return raiz

    def obter_lista_livros(self, raiz):
        if not raiz:
            return []

        livros = []
        livros += self.obter_lista_livros(raiz.esquerda)
        livros.append(raiz.livro)
        livros += self.obter_lista_livros(raiz.direita)

        return livros
    
    def buscar_por_identificador(self, raiz, identificador):
        if not raiz:
            return None

        if raiz.livro.identificador == identificador:
            return raiz

        if identificador < raiz.livro.identificador:
            return self.buscar_por_identificador(raiz.esquerda, identificador)
        else:
            return self.buscar_por_identificador(raiz.direita, identificador)

    def remover_por_identificador(self, raiz, identificador):
        no = self.buscar_por_identificador(raiz, identificador)
        if not no:
            messagebox.showwarning("Atenção", "Livro não encontrado.")
            return raiz

        raiz = self.remover(raiz, no.livro.titulo)
        return raiz

    def merge_sort(self, lista):
        if len(lista) <= 1:
            return lista

        meio = len(lista) // 2
        esquerda = lista[:meio]
        direita = lista[meio:]

        esquerda = self.merge_sort(esquerda)
        direita = self.merge_sort(direita)

        return self.merge(esquerda, direita)

    def merge(self, esquerda, direita):
        resultado = []
        i = j = 0

        while i < len(esquerda) and j < len(direita):
            if esquerda[i].titulo < direita[j].titulo:
                resultado.append(esquerda[i])
                i += 1
            else:
                resultado.append(direita[j])
                j += 1

        resultado.extend(esquerda[i:])
        resultado.extend(direita[j:])
        return resultado
    
class BibliotecaGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Gerenciador de Biblioteca")

        self.arvore = ArvoreAVL()
        self.raiz = None

        # Interface
        self.frame = tk.Frame(root, padx=20, pady=20)
        self.frame.pack()

        # Labels e Entradas
        tk.Label(self.frame, text="Título do Livro:", font=("Arial", 12)).grid(row=0, column=0, padx=5, pady=5, sticky="w")  # Aumentando o tamanho da fonte
        self.titulo_entry = tk.Entry(self.frame, width=30, font=("Arial", 12))  # Aumentando a largura da caixa de entrada e o tamanho da fonte
        self.titulo_entry.grid(row=0, column=1, padx=5, pady=5)

        tk.Label(self.frame, text="Nome do Autor:", font=("Arial", 12)).grid(row=1, column=0, padx=5, pady=5, sticky="w")  # Aumentando o tamanho da fonte
        self.autor_entry = tk.Entry(self.frame, width=30, font=("Arial", 12))  # Aumentando a largura da caixa de entrada e o tamanho da fonte
        self.autor_entry.grid(row=1, column=1, padx=5, pady=5)

        # Botões
        self.botao_inserir = tk.Button(self.frame, text="Inserir Livro", command=self.inserir_livro, width=20, borderwidth=3, font=("Arial", 12))  # Aumentando o tamanho do botão, adicionando borda e o tamanho da fonte
        self.botao_inserir.grid(row=2, columnspan=2, pady=10)

        self.botao_buscar = tk.Button(self.frame, text="Buscar por Autor", command=self.buscar_por_autor, width=20, borderwidth=3, font=("Arial", 12))  # Aumentando o tamanho do botão, adicionando borda e o tamanho da fonte
        self.botao_buscar.grid(row=3, columnspan=2, pady=5)

        self.botao_exibir = tk.Button(self.frame, text="Exibir Livros", command=self.exibir_livros, width=20, borderwidth=3, font=("Arial", 12))  # Aumentando o tamanho do botão, adicionando borda e o tamanho da fonte
        self.botao_exibir.grid(row=4, columnspan=2, pady=5)

        self.botao_salvar = tk.Button(self.frame, text="Salvar em Arquivo", command=self.salvar_em_arquivo, width=20, borderwidth=3, font=("Arial", 12))  # Aumentando o tamanho do botão, adicionando borda e o tamanho da fonte
        self.botao_salvar.grid(row=5, columnspan=2, pady=5)

        self.botao_carregar = tk.Button(self.frame, text="Carregar de Arquivo", command=self.carregar_de_arquivo, width=20, borderwidth=3, font=("Arial", 12))  # Aumentando o tamanho do botão, adicionando borda e o tamanho da fonte
        self.botao_carregar.grid(row=6, columnspan=2, pady=5)

    # Label e Entrada para Exclusão de Livro
        tk.Label(self.frame, text="Livro (linha) a Excluir:", font=("Arial", 12)).grid(row=7, column=0, padx=5, pady=5, sticky="w")
        self.titulo_exclusao_entry = tk.Entry(self.frame, width=30, font=("Arial", 12))
        self.titulo_exclusao_entry.grid(row=7, column=1, padx=5, pady=5)

        # Botão para Excluir Livro
        self.botao_excluir = tk.Button(self.frame, text="Excluir Livro", command=self.excluir_livro, width=20, borderwidth=3, font=("Arial", 12))
        self.botao_excluir.grid(row=8, columnspan=2, pady=5)


    def inserir_livro(self):
        titulo = self.titulo_entry.get()
        autor = self.autor_entry.get()

        if titulo and autor:
            livro = Livro(titulo, autor)
            self.raiz = self.arvore.inserir(self.raiz, livro)
            messagebox.showinfo("Sucesso", "Livro inserido com sucesso!")
        else:
            messagebox.showwarning("Atenção", "Preencha título e autor.")

    def exibir_livros_ordenados(self):
        livros_desordenados = self.arvore.obter_lista_livros(self.raiz)
        livros_ordenados = self.arvore.merge_sort(livros_desordenados)

        if livros_ordenados:
            livros_str = "\n".join(str(livro) for livro in livros_ordenados)
            messagebox.showinfo("Livros em Ordem Crescente", livros_str)
        else:
            messagebox.showinfo("Livros em Ordem Crescente", "Biblioteca vazia.")

    def buscar_por_autor(self):
        autor = self.autor_entry.get()

        if autor:
            contagem = self.arvore.contagem_por_autor(self.raiz, autor)
            messagebox.showinfo("Busca por Autor", f"Quantidade de livros de {autor}: {contagem}")
        else:
            messagebox.showwarning("Atenção", "Digite o nome do autor.")

    def excluir_livro(self):
        identificador = int(self.titulo_exclusao_entry.get())

        if identificador:
            self.raiz = self.arvore.remover_por_identificador(self.raiz, identificador)
            messagebox.showinfo("Sucesso", "Livro excluído com sucesso!")
        else:
            messagebox.showwarning("Atenção", "Digite o identificador do livro a excluir.")

    def exibir_livros(self):
        livros_ordem_crescente = self.arvore.exibir_em_ordem_crescente(self.raiz)
        if livros_ordem_crescente:
            livros_str = "\n".join(str(livro) for livro in livros_ordem_crescente)
            messagebox.showinfo("Livros em Ordem Crescente", livros_str)
        else:
            messagebox.showinfo("Livros em Ordem Crescente", "Biblioteca vazia.")

    def salvar_em_arquivo(self):
        self.arvore.salvar_arvore_em_arquivo(self.raiz, "biblioteca.txt")
        messagebox.showinfo("Salvo", "Biblioteca salva em arquivo 'biblioteca.txt'.")

    def carregar_de_arquivo(self):
        self.raiz = self.arvore.carregar_arvore_de_arquivo("biblioteca.txt")
        messagebox.showinfo("Carregado", "Biblioteca carregada do arquivo 'biblioteca.txt'.")


if __name__ == "__main__":
    root = tk.Tk()
    app = BibliotecaGUI(root)
    root.mainloop()
