import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

class MergeSort {
    public static void mergeSort(int[] arr, int left, int right) {
        if (left < right) {
            int mid = (left + right) / 2;

            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);

            merge(arr, left, mid, right);
        }
    }

    public static void merge(int[] arr, int left, int mid, int right) {
        int n1 = mid - left + 1;
        int n2 = right - mid;

        int[] L = new int[n1];
        int[] R = new int[n2];

        for (int i = 0; i < n1; ++i)
            L[i] = arr[left + i];
        for (int j = 0; j < n2; ++j)
            R[j] = arr[mid + 1 + j];

        int i = 0, j = 0;
        int k = left;

        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
}

public class MergeSortz {
    public static void main(String[] args) {
        List<Integer> dataList = new ArrayList<>();

        try {
            BufferedReader reader = new BufferedReader(new FileReader("dados100_mil.txt"));
            String line;
            while ((line = reader.readLine()) != null) {
                line = line.replaceAll("[\"\\[\\],-]", "").trim();
                String[] numbers = line.split(" ");

                for (String num : numbers) {
                    int key = Integer.parseInt(num);
                    dataList.add(key);
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        int[] dataArray = dataList.stream().mapToInt(Integer::intValue).toArray();

        long startTimeMergeSort = System.nanoTime();
        MergeSort.mergeSort(dataArray, 0, dataArray.length - 1);
        long endTimeMergeSort = System.nanoTime();

        double executionTimeMergeSort = (endTimeMergeSort - startTimeMergeSort) / 1e8;
        String formattedTimeMergeSort = formatTime(executionTimeMergeSort);

        System.out.println("\nArray ordenado pelo MergeSort:");
        for (int num : dataArray) {
            System.out.print(num + " ");
        }
        System.out.println("\nTempo de execução do MergeSort: " + formattedTimeMergeSort);
    }

    public static String formatTime(double timeInSeconds) {
        int hours = (int) (timeInSeconds / 3600);
        int minutes = (int) ((timeInSeconds % 3600) / 60);
        int seconds = (int) (timeInSeconds % 60);
        int milliseconds = (int) ((timeInSeconds - Math.floor(timeInSeconds)) * 100);

        return String.format("%02d:%02d:%02d:%02d", hours, minutes, seconds, milliseconds);
    }
}
