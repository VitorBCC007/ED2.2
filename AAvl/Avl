import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

class AVLTree {
    static class Node {
        int key, height;
        Node left, right;

        Node(int d) {
            key = d;
            height = 1;
        }
    }

    Node root;

    int height(Node N) {
        if (N == null)
            return 0;
        return N.height;
    }

    int max(int a, int b) {
        return (a > b) ? a : b;
    }

    Node rightRotate(Node y) {
        Node x = y.left;
        Node T2 = x.right;

        x.right = y;
        y.left = T2;

        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;

        return x;
    }

    Node leftRotate(Node x) {
        Node y = x.right;
        Node T2 = y.left;

        y.left = x;
        x.right = T2;

        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;

        return y;
    }

    int getBalance(Node N) {
        if (N == null)
            return 0;
        return height(N.left) - height(N.right);
    }

    Node insert(Node node, int key) {
        if (node == null)
            return new Node(key);

        if (key < node.key)
            node.left = insert(node.left, key);
        else if (key > node.key)
            node.right = insert(node.right, key);
        else
            return node;

        node.height = 1 + max(height(node.left), height(node.right));

        int balance = getBalance(node);

        if (balance > 1 && key < node.left.key)
            return rightRotate(node);

        if (balance < -1 && key > node.right.key)
            return leftRotate(node);

        if (balance > 1 && key > node.left.key) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }

        if (balance < -1 && key < node.right.key) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }

        return node;
    }

    void inOrder(Node node) {
        if (node != null) {
            inOrder(node.left);
            System.out.print(node.key + " ");
            inOrder(node.right);
        }
    }
}

public class ArvAvl {
    public static void main(String[] args) {
        AVLTree tree = new AVLTree();
        List<Integer> dataList = new ArrayList<>();

        try {
            BufferedReader reader = new BufferedReader(new FileReader("dados100_mil.txt"));
            String line;
            while ((line = reader.readLine()) != null) {
                // Removendo caracteres extras e convertendo para números
                line = line.replaceAll("[\"\\[\\],-]", "").trim();
                String[] numbers = line.split(" ");

                for (String num : numbers) {
                    int key = Integer.parseInt(num);
                    tree.root = tree.insert(tree.root, key);
                    dataList.add(key);
                }
            }
            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        long startTimeAVL = System.nanoTime();
        tree.inOrder(tree.root);
        long endTimeAVL = System.nanoTime();

        double executionTimeAVL = (endTimeAVL - startTimeAVL) / 1e8;
        String formattedTimeAVL = formatTime(executionTimeAVL);
        System.out.println("\nTempo de execução da Árvore AVL: " + formattedTimeAVL);
    }

    public static String formatTime(double timeInSeconds) {
        int hours = (int) (timeInSeconds / 3600);
        int minutes = (int) ((timeInSeconds % 3600) / 60);
        int seconds = (int) (timeInSeconds % 60);
        int milliseconds = (int) ((timeInSeconds - Math.floor(timeInSeconds)) * 100);

        return String.format("%02d:%02d:%02d:%02d", hours, minutes, seconds, milliseconds);
    }
}
