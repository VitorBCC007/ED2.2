import java.util.*;
import java.io.*;

class Node {
    int key;
    int height;
    Node left, right;

    Node(int key) {
        this.key = key;
        this.height = 1;
        this.left = this.right = null;
    }
}

class AVLTree {
    Node root;

    int height(Node node) {
        if (node == null)
            return 0;
        return node.height;
    }

    int max(int a, int b) {
        return (a > b) ? a : b;
    }

    Node rightRotate(Node y) {
        Node x = y.left;
        Node T2 = x.right;

        x.right = y;
        y.left = T2;

        y.height = max(height(y.left), height(y.right)) + 1;
        x.height = max(height(x.left), height(x.right)) + 1;

        return x;
    }

    Node leftRotate(Node x) {
        Node y = x.right;
        Node T2 = y.left;

        y.left = x;
        x.right = T2;

        x.height = max(height(x.left), height(x.right)) + 1;
        y.height = max(height(y.left), height(y.right)) + 1;

        return y;
    }

    int getBalance(Node N) {
        if (N == null)
            return 0;
        return height(N.left) - height(N.right);
    }

    Node insert(Node node, int key) {
        if (node == null)
            return new Node(key);

        if (key < node.key)
            node.left = insert(node.left, key);
        else if (key > node.key)
            node.right = insert(node.right, key);
        else
            return node;

        node.height = 1 + max(height(node.left), height(node.right));

        int balance = getBalance(node);

        if (balance > 1 && key < node.left.key)
            return rightRotate(node);

        if (balance < -1 && key > node.right.key)
            return leftRotate(node);

        if (balance > 1 && key > node.left.key) {
            node.left = leftRotate(node.left);
            return rightRotate(node);
        }

        if (balance < -1 && key < node.right.key) {
            node.right = rightRotate(node.right);
            return leftRotate(node);
        }

        return node;
    }

    void inOrder(Node node) {
        if (node != null) {
            inOrder(node.left);
            System.out.print(node.key + " ");
            inOrder(node.right);
        }
    }

    Node minValueNode(Node node) {
        Node current = node;
        while (current.left != null)
            current = current.left;
        return current;
    }

    Node deleteNode(Node root, int key) {
        if (root == null)
            return root;

        if (key < root.key)
            root.left = deleteNode(root.left, key);
        else if (key > root.key)
            root.right = deleteNode(root.right, key);
        else {
            if (root.left == null || root.right == null) {
                Node temp = null;
                if (temp == root.left)
                    temp = root.right;
                else
                    temp = root.left;

                if (temp == null) {
                    temp = root;
                    root = null;
                } else
                    root = temp;
            } else {
                Node temp = minValueNode(root.right);
                root.key = temp.key;
                root.right = deleteNode(root.right, temp.key);
            }
        }

        if (root == null)
            return root;

        root.height = max(height(root.left), height(root.right)) + 1;

        int balance = getBalance(root);

        if (balance > 1 && getBalance(root.left) >= 0)
            return rightRotate(root);

        if (balance < -1 && getBalance(root.right) <= 0)
            return leftRotate(root);

        if (balance > 1 && getBalance(root.left) < 0) {
            root.left = leftRotate(root.left);
            return rightRotate(root);
        }

        if (balance < -1 && getBalance(root.right) > 0) {
            root.right = rightRotate(root.right);
            return leftRotate(root);
        }

        return root;
    }

    int countOccurrences(Node root, int key) {
        int count = 0;
        while (root != null) {
            if (root.key == key) {
                count++;
                root = root.right;
            } else if (key < root.key)
                root = root.left;
            else
                root = root.right;
        }
        return count;
    }
}

public class Main {
    public static void main(String[] args) {
        AVLTree tree = new AVLTree();
        List<Integer> dataList = new ArrayList<>();

        try {
            File file = new File("dados100_mil.txt");
            Scanner scanner = new Scanner(file);
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine().replaceAll("[,\\[\\]-]", "").trim();
                String[] numbers = line.split(" ");

                for (String num : numbers) {
                    int key = Integer.parseInt(num);
                    tree.root = tree.insert(tree.root, key);
                    dataList.add(key);
                }
            }
            scanner.close();
        } catch (IOException e) {
            System.out.println("Erro ao ler o arquivo: " + e);
        }

        long startTimeAVL = System.currentTimeMillis();
        tree.inOrder(tree.root);

        Random random = new Random();
        for (int i = 0; i < 50000; i++) {
            int randNum = random.nextInt(19999) - 9999;
            if (randNum % 3 == 0)
                tree.root = tree.insert(tree.root, randNum);
            else if (randNum % 5 == 0)
                tree.root = tree.deleteNode(tree.root, randNum);
            else {
                int count = tree.countOccurrences(tree.root, randNum);
                System.out.println("O número " + randNum + " aparece " + count + " vezes na árvore.");
            }
        }

        long endTimeAVL = System.currentTimeMillis();
        long executionTimeAVL = endTimeAVL - startTimeAVL;
        System.out.println("\nTempo de execução da Árvore AVL após operações: " + formatTime(executionTimeAVL));
    }

    static String formatTime(long timeInSeconds) {
        int hours = (int) (timeInSeconds / 3600000);
        int minutes = (int) ((timeInSeconds % 3600000) / 60000);
        int seconds = (int) ((timeInSeconds % 60000) / 1000);
        int milliseconds = (int) (timeInSeconds % 1000);

        return String.format("%02d:%02d:%02d:%03d", hours, minutes, seconds, milliseconds);
    }
}
//Tempo de execução da Árvore AVL após operações: 00:00:02:905
//Tempo de execução da Árvore AVL após operações: 00:00:02:895
//Tempo de execução da Árvore AVL após operações: 00:00:02:889
